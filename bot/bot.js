import { Bot } from 'grammy';
import axios from 'axios';
import { config } from '../config/config.js';
import Chat from '../models/chat.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(config.token);

// –£–º–Ω–∞—è —Å—Å—ã–ª–∫–∞ Flyer
const MINI_APP_LINK = 'https://t.me/FlyWebTasksBot/app?startapp=3HkVvy';

// === üì£ GramAds —Ñ—É–Ω–∫—Ü–∏—è ===
async function SendPostToChat(chatId) {
    const token =
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNzYzNyIsImp0aSI6ImQwMWMyYmMxLWU5MjAtNDdiYy04NGU4LTUwY2UzMTBlNTE4ZiIsIm5hbWUiOiLQntGALdCb0L7QstGD0YjQutCwIC8g0J_RgNCw0L3QuiIsImJvdGlkIjoiMTQ4MTkiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjI3NjM3IiwibmJmIjoxNzQ5MjQ1NjE5LCJleHAiOjE3NDk0NTQ0MTksImlzcyI6IlN0dWdub3YiLCJhdWQiOiJVc2VycyJ9.rLAf64WINuoHZhwJOIkxesYF4SnNWIDQsapbl1vm7Ns';

    try {
        const headers = new Headers();
        headers.append('Authorization', `Bearer ${token}`);
        headers.append('Content-Type', 'application/json');

        const body = JSON.stringify({ SendToChatId: chatId });

        const res = await fetch('https://api.gramads.net/ad/SendPost', {
            method: 'POST',
            headers,
            body,
        });

        if (!res.ok) {
            console.error(
                `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`
            );
            return;
        }

        const result = await res.text();
        console.log(`‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ GramAds –¥–ª—è ${chatId}:`, err.message);
    }
}

// === üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId ===
export async function saveChatId(userId, chatId) {
    try {
        let user = await Chat.findOne({ userId });

        if (user) {
            user.chatId = chatId;
        } else {
            user = new Chat({ userId, chatId });
        }

        await user.save();
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω chatId –¥–ª—è userId ${userId}: ${chatId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chatId:', error);
    }
}

// === üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π Flyer ===
export async function checkTasksCompleted(userId) {
    try {
        const { data } = await axios.post(
            'https://api.flyerservice.io/get_completed_tasks',
            {
                key: config.flyerApiKey,
                user_id: userId,
            },
            {
                headers: { 'Content-Type': 'application/json' },
            }
        );

        if (
            data.error === 'The user does not have any tasks' ||
            (data.result?.count_all_tasks || 0) === 0
        ) {
            return { status: 'no_tasks' };
        }

        if (data.error) {
            console.warn('Flyer API error:', data.error);
            return { status: 'error' };
        }

        const completed = (data.result.completed_tasks || []).length;
        const total = data.result.count_all_tasks;

        if (completed === total) {
            return { status: 'completed' };
        } else {
            return { status: 'incomplete', completed, total };
        }
    } catch (error) {
        console.error('Flyer check error:', error.response?.data || error);
        return { status: 'error' };
    }
}

// === üü¢ –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const wasInDbBefore = await Chat.findOne({ userId });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await saveChatId(userId, chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    const flyerStatus = await checkTasksCompleted(userId);

    if (flyerStatus.status === 'completed') {
        const link = `${config.domain}/megapack?userId=${userId}`;
        await ctx.reply(
            `üîó –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø—Ä–∞–Ω–∫–∞–Ω—É—Ç—å –∏—Ö.\n<a href="${link}">${link}</a>`,
            { parse_mode: 'HTML' }
        );

        // üì£ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
        await SendPostToChat(userId);
        return;
    }

    if (flyerStatus.status === 'incomplete') {
        const { completed, total } = flyerStatus;
        return ctx.reply(
            `üïí –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed} –∏–∑ ${total} –∑–∞–¥–∞–Ω–∏–π.\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start:\n${MINI_APP_LINK}`
        );
    }

    if (flyerStatus.status === 'no_tasks') {
        if (wasInDbBefore) {
            const link = `${config.domain}/megapack?userId=${userId}`;
            await ctx.reply(
                `üîó –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø—Ä–∞–Ω–∫–∞–Ω—É—Ç—å –∏—Ö.\n<a href="${link}">${link}</a>`,
                { parse_mode: 'HTML' }
            );

            // üì£ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
            await SendPostToChat(userId);
            return;
        } else {
            return ctx.reply(
                `üìã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Å—ã–ª–∫–µ, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π –∑–∞–¥–∞–Ω–∏—è:\n\n${MINI_APP_LINK}\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start`
            );
        }
    }

    // Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    return ctx.reply(
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
});

export default bot;
