import { Bot, InlineKeyboard } from 'grammy';
import axios from 'axios';
import { config } from '../config/config.js';
import Chat from '../models/chat.js';

const bot = new Bot(config.token);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
const CHANNELS = [
    { id: config.channelId1, link: config.channelLink1 },
    { id: config.channelId2, link: config.channelLink2 },
];

async function saveChatId(userId, chatId) {
    try {
        let user = await Chat.findOne({ userId });
        if (user) {
            user.chatId = chatId;
        } else {
            user = new Chat({ userId, chatId });
        }
        await user.save();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chatId:', error);
    }
}

// =============================
// FLYER API FUNCTIONS
// =============================
async function getTasksFromFlyer(userId, language_code = 'ru') {
    try {
        console.log('[Flyer API] get_tasks request:', {
            userId,
            language_code,
            limit: 4,
        });

        const { data } = await axios.post(
            'https://api.flyerservice.io/get_tasks',
            {
                key: config.flyerApiKey,
                user_id: userId,
                language_code,
                limit: 4,
            },
            { headers: { 'Content-Type': 'application/json' } }
        );

        console.log('[Flyer API] get_tasks response:', data);

        if (data.error || !data.result || data.result.length === 0) {
            return [];
        }

        return data.result;
    } catch (e) {
        console.error(
            '[Flyer API] get_tasks error:',
            e.response?.data || e.message || e
        );
        return [];
    }
}

async function checkTaskCompletionFlyer(task) {
    try {
        if (
            task.status &&
            ['done', 'completed', 'complete', true].includes(task.status)
        ) {
            console.log('[Flyer API] check_task skipped (already done):', task);
            return true;
        }

        console.log('[Flyer API] check_task request:', {
            signature: task.signature,
        });

        const { data } = await axios.post(
            'https://api.flyerservice.io/check_task',
            {
                key: config.flyerApiKey,
                signature: task.signature,
            },
            { headers: { 'Content-Type': 'application/json' } }
        );

        console.log('[Flyer API] check_task response:', data);

        if (data.error) return false;

        // –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º waiting –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return (
            data.result === 'done' ||
            data.result === 'completed' ||
            data.result === true ||
            data.result === 'waiting'
        );
    } catch (e) {
        console.error(
            '[Flyer API] check_task error:',
            e.response?.data || e.message || e
        );
        return false;
    }
}

async function checkAllTasksCompletedFlyer(tasks) {
    for (const task of tasks) {
        if (!task.signature) return false;
        const done = await checkTaskCompletionFlyer(task);
        if (!done) return false;
    }
    return true;
}

// =============================
// BOT COMMANDS
// =============================
bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    await saveChatId(userId, chatId);

    const lang = ctx.from.language_code || 'ru';

    // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –æ—Ç Flyer
    let flyerTasks = await getTasksFromFlyer(userId, lang);

    if (flyerTasks.length === 0) {
        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        let allJoined = true;
        for (const ch of CHANNELS) {
            try {
                const member = await ctx.api.getChatMember(ch.id, userId);
                if (!member || ['left', 'kicked'].includes(member.status)) {
                    allJoined = false;
                    break;
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
                allJoined = false;
                break;
            }
        }

        if (allJoined) {
            // –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ ‚Äî —Å—Ä–∞–∑—É –¥–∞—ë–º –¥–æ—Å—Ç—É–ø
            const link = `${config.domain}/megapack?userId=${userId}`;
            return ctx.reply(
                `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n<a href="${link}">${link}</a>`,
                { parse_mode: 'HTML' }
            );
        } else {
            // –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            const keyboard = new InlineKeyboard();
            CHANNELS.forEach((ch) => keyboard.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', ch.link));
            keyboard.text('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'check_channels');

            return ctx.reply(
                '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":',
                { reply_markup: keyboard }
            );
        }
    }

    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new InlineKeyboard();
    flyerTasks.forEach((task) => {
        if (task.link && (task.title || task.name)) {
            keyboard.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', task.link);
        }
    });
    keyboard.text('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'check_flyer');

    await ctx.reply(
        '–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–¥–ø–∏—à–∏—Å—å), –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":',
        { reply_markup: keyboard }
    );
});

// =============================
// CALLBACKS
// =============================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Flyer
bot.callbackQuery('check_flyer', async (ctx) => {
    const userId = ctx.from.id;
    const lang = ctx.from.language_code || 'ru';

    const tasks = await getTasksFromFlyer(userId, lang);
    if (tasks.length === 0) {
        await ctx.answerCallbackQuery(
            '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        );
        return ctx.reply('–ó–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.');
    }

    const allDone = await checkAllTasksCompletedFlyer(tasks);
    if (allDone) {
        const link = `${config.domain}/megapack?userId=${userId}`;
        await ctx.reply(
            `üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n<a href="${link}">${link}</a>`,
            {
                parse_mode: 'HTML',
            }
        );
        await ctx.answerCallbackQuery('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    } else {
        await ctx.reply(
            '‚ùó –ù–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Å–Ω–æ–≤–∞.'
        );
        await ctx.answerCallbackQuery('–ó–∞–¥–∞–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.');
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 2 –∫–∞–Ω–∞–ª–∞
bot.callbackQuery('check_channels', async (ctx) => {
    const userId = ctx.from.id;

    let allJoined = true;
    for (const ch of CHANNELS) {
        try {
            const member = await ctx.api.getChatMember(ch.id, userId);
            if (!member || ['left', 'kicked'].includes(member.status)) {
                allJoined = false;
                break;
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
            allJoined = false;
            break;
        }
    }

    if (allJoined) {
        const link = `${config.domain}/megapack?userId=${userId}`;
        await ctx.reply(
            `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞, –û—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–≥—É:\n\n<a href="${link}">${link}</a>`,
            { parse_mode: 'HTML' }
        );
        await ctx.answerCallbackQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
    } else {
        const keyboard = new InlineKeyboard();
        CHANNELS.forEach((ch) => keyboard.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', ch.link));
        keyboard.text('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'check_channels');

        await ctx.reply(
            '‚ùó –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":',
            { reply_markup: keyboard }
        );
        await ctx.answerCallbackQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.');
    }
});

export default bot;
